Basic Design considerations:
- computer will execute one instruction per tick when possible
- Each instruction should exist on a 4 tick cycle when possible:
    1.  Load PROM instruction
        Iterated PC
    2.  Evaluate Instuction
        Load Mem Channels M1, M2
    3.  ALU
        Program Counter
    4.  Save Result
        Save Flags


PROM Variables
- O:                Operation Code
- "copper-ore":     PROM line number
- P:                Program Counter
- 1:                Operand #1 Memory address (read)
- 2:                Operand #2 Memory address (read)
- 3:                Operand #3 Memory address (write)
- A:                Immediate Value added to Operand #1 memory value
- B:                Immediate Value added to Operand #2 memory value
- C:                Immediate Value ?? function undetermined as of yet

Notation | Description
:---: | ---
I | Immediate value, 32 bit signed
M | Register
R/I | Register or immediate value
R/I/R,I | Register or immediate or both (comma separated)
R/L | Register or label


MOV R/I, [R/I/R,I] | M[sum(o2)] := o1 | `STORE 5, [R5]`<br>`STORE R1, [R2, 5]`<br>`STORE PC, [0]`

MOV [$4, 5], 6 
Would be implimented by:
1:=4
2:=0
3:=0
A:=5
B:=6

RINST | LOAD(1,2), OPIS(MOV) | 3 = A + V1 | SAVE[3] = B + V2

MOV [$4, 5], $1 
Would be implimented by:
1:=4
2:=1
3:=0
A:=5
B:=0

RINST | LOAD(1,2), OPIS(MOV) | 3 = A + V1 | SAVE[3] = B + V2

MOV [1], 4 
Would be implimented by:
IN:
1:=0
2:=0
3:=0
A:=1
B:=4

OUT to MEM:
V:=4
3:=1

RINST | LOAD(1,2), OPIS(MOV) | 3 = A + V1 | SAVE[3] = B + V2

MOV [$1, 1], 3 
Would be implimented by:
IN:
1:=1
2:=0
3:=0
A:=1
B:=3

OUT to MEM:
V:=3
3:=$1+1

RINST | LOAD(1,2), OPIS(MOV) | 3 = A + V1 | V = B + V2


GrayGoo Pyanodon Early Game Considerations:
Option 1: Start game with material sufficient to build Red Science factory
- Easy Peasy

Option 2: Start game as current with small amount of items to start resource mining
- Need to utilize crashed spaceship assemblers to make circuits
- Need to transport water to Tin mining spot for steam
- 





