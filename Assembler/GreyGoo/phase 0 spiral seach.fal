; Factorio Pyanodon Greygoo Program
; Phase 0.2 Spiral Search Program
; Version 0.02
; This Phase O program tries a G3 sized spiral search pattern, in a G2 size increment, for a viable start location.

; Definitions of the memory addresses of the data inputs for the program
#def OUT_scanner_x $1025
#def OUT_scanner_y $1026
#def OUT_scanner_height $1027
#def OUT_scanner_width $1028

#def OUT_rotation $1029
#def OUT_construct_bp $1030
#def OUT_block_coordinates $1031
#def OUT_block_num $1032

; Definitions of the memory addresses of the data outputs for the program
#def IN_resources $2049
#def IN_total_mineable $2050
#def IN_construction_bots_used $2051
#def IN_accumulator_charge $2052

#def IN_block_coordinates $2053
#def IN_block_num $2054
#def IN_block_identity $2055
#def IN_block_size $2056

; Resource Masks
#def water      0b00000000000000000000000000000001
#def unscanned  0b00000000000000000000000000000010
#def stone      0b00000000000000000000000000000100

; Constants
#def grid_s1 24
#def grid_s2 48
#def grid_s3 96



;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
STOR 4, 1           ; M[4] Segment length
STOR 11, 0          ; M[11] x origin of scan
STOR 12, 0          ; M[12] y origin of scan

start:
CMP IN_accumulator_charge, 100
BN start
CMP 0, IN_construction_bots_used
BN start

ADD OUT_scanner_height, grid_s3, 0
ADD OUT_scanner_width, grid_s3, 0
MUL OUT_scanner_x, grid_s2, 1
MUL OUT_scanner_y, 0, 1

ADD OUT_scanner_x, OUT_scanner_x, grid_s1
ADD OUT_scanner_y, OUT_scanner_y, grid_s1

;Scan in all 4 directions for clear spaces
MUL $1, grid_s2, 1 ; i vector component
MUL $2, grid_s2, 0 ; j vector component
STOR 3, 0           ; Position in Segment Length
STOR 6, 0           ; M[6] Temporary working variable

scan_loop:
ADD $3, $3, 1
ADD OUT_scanner_x, OUT_scanner_x, $1
ADD OUT_scanner_y, OUT_scanner_y, $2
AND $-1, IN_resources, water
BZ 1f
B 2f
1:
AND $-1, IN_resources, unscanned
BZ 1f
1:
CMP 10000, IN_total_mineable
BN 2f
B scan_end
2:
CMP $3, $4
BZ scan_rotate
B scan_loop

scan_rotate:
MUL $6, $2, -1     ; Rotate [i,j] direction vector
MUL $2, $1, 1
ADD $1, $6, 0
STOR 3, 0          ; M[3] = 0
CMP $2, 0
BZ 1f
B scan_loop
1:
ADD $4, $4, 1
B scan_loop
scan_end:
HLT
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; ENCODE_COORDINATES FUNCTION
; return PC: $6
; inputs:    $1 <-- x
;            $2 <-- y
; outputs:   OUT_block_coordinates
B 9f
encode_coord:
ADD $1, $1, 0x3fff
ADD $2, $2, 0x3fff
SAL OUT_block_coordinates, $1, 15
ADD OUT_block_coordinates, OUT_block_coordinates, $2
B $6
9:
HLT