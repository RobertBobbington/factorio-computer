; Factorio Pyanodon Greygoo Program
; Version 0.01
;
;
;

; Definitions of the memory addresses of the data inputs for the program
#def OUT_scanner_x $1025
#def OUT_scanner_y $1026
#def OUT_scanner_height $1027
#def OUT_scanner_width $1028

#def OUT_rotation $1029
#def OUT_construct_bp $1030
#def OUT_block_coordinates $1031
#def OUT_block_num $1032

; Definitions of the memory addresses of the data outputs for the program
#def IN_resources $2049
#def IN_total_mineable $2050
#def IN_construction_bots_used $2051
#def IN_accumulator_charge $2052

#def IN_block_coordinates $2053
#def IN_block_count $2054

; Resource Masks
#def water      0b00000000000000000000000000000001
#def unscanned  0b00000000000000000000000000000010
#def stone      0b00000000000000000000000000000100

; Constants
#def grid_s1 24
#def grid_s2 48



;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
start:
CMP IN_accumulator_charge, 100
BN start
CMP 0, IN_construction_bots_used
BN start

ADD OUT_scanner_height, grid_s2, 0
ADD OUT_scanner_width, grid_s2, 0
MUL OUT_scanner_x, 1, 0
MUL OUT_scanner_y, 1, 0

;Scan in all 4 directions for clear spaces
MUL $1, grid_s2, 1 ; i vector component
MUL $2, grid_s2, 0 ; j vector component
STOR 3, 0           ; Block counter
STOR 4, 11          ; M[4] is minimum block distance to a clear block
STOR 5, 0           ; M[5] Number of rotations
STOR 6, 0           ; M[6] Temporary working variable
STOR 7, 0           ; M[7] i-best, direction vector of best block
STOR 8, 0           ; M[8] j-best,
STOR 9, 0           ; M[9] number of sequential good blocks

scan_loop:
CMP 4, $5
BZ scan_end
ADD $3, $3, 1
ADD OUT_scanner_x, OUT_scanner_x, $1
ADD OUT_scanner_y, OUT_scanner_y, $2
CMP $3, $4          ; if (grid counter == 10), rotate
BZ scan_rotate
CMP 10000, IN_total_mineable
BN scan_loop
AND $-1, IN_resources, water
BZ 1f
B scan_rotate
1:
AND $-1, IN_resources, unscanned
BZ 1f
B scan_rotate
1:
ADD $9, $9, 1
CMP $9, 2
HLT
BN scan_loop
STOR 4, $3
STOR 7, $1
STOR 8, $2
scan_rotate:
;HLT
MUL OUT_scanner_x, 1, 0
MUL OUT_scanner_y, 1, 0
MUL $6, $2, -1     ; Rotate [i,j] direction vector
MUL $2, $1, 1
ADD $1, $6, 0
STOR 3, 0          ; M[3] = 0
ADD $5, $5, 1       ; M[5]++, rotation
STOR 9, 0
B scan_loop
scan_end:

CMP IN_accumulator_charge, 100
BN scan_end
CMP 0, IN_construction_bots_used
BN scan_end
ADD $3, $3, 1
ADD OUT_scanner_x, OUT_scanner_x, $7
ADD OUT_scanner_y, OUT_scanner_y, $8
CMP $4, $3
BZ build_solar
ADD OUT_construct_bp, 1, 0
ADD OUT_construct_bp, 0, 0
;HLT
B scan_end
build_solar:
ADD OUT_construct_bp, 2, 0
ADD OUT_construct_bp, 0, 0
HLT


; ENCODE_COORDINATES FUNCTION
; return PC: $1
; inputs:    $2 <-- x
;            $3 <-- y
; outputs:   $4
B 9f
encode_coord:
ADD $2, $2, 0x3fff
ADD $3, $3, 0x3fff
SAL $4, $2, 15
ADD $4, $4, $3
B $1
9:

; DECODE_COORDINATES FUNCTION
; return PC: $1
; inputs:    $4
; outputs:   $2 <-- x
;            $3 <-- y
B 9f
decode_coord:
SAR $2, $4, 15
AND $3, $4, 0x7fff
SUB $2, $2, 0x3fff
SUB $3, $3, 0x3fff
B $1
9:
HLT